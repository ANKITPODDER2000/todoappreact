{"version":3,"sources":["TodoItem.js","Heading.js","AddTodoItem.js","TodoBox.js","App.js","serviceWorker.js","index.js"],"names":["TodoItem","props","state","task","prop","handleSubmit","bind","handleChange","handleSwap","edit","delete","evt","preventDefault","this","changeTask","id","setState","target","value","neededit","deleteTodo","swapDone","className","onSubmit","name","onChange","done","onClick","Component","Heading","AddTodoItem","todo","uuidv4","addTodo","placeholder","disabled","length","TodoBox","items","map","a","filter","console","log","style","paddingBottom","key","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.7c0294a0.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./TodoItem.css\";\r\n\r\nclass TodoItem extends Component{\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            task : this.props.prop.task\r\n        }\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSwap   = this.handleSwap.bind(this);\r\n        this.edit         = this.edit.bind(this);\r\n        this.delete       = this.delete.bind(this);\r\n    }\r\n    handleSubmit(evt) {\r\n        evt.preventDefault();\r\n        this.props.changeTask(this.props.prop.id , this.state.task);\r\n    }\r\n    handleChange(evt) {\r\n        this.setState({\r\n            task: evt.target.value\r\n        });\r\n    }\r\n    edit() {\r\n        this.props.neededit(this.props.prop.id);\r\n    }\r\n    delete() {\r\n        this.props.deleteTodo(this.props.prop.id);\r\n    }\r\n    handleSwap() {\r\n        this.props.swapDone(this.props.prop.id);\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"todoitem\">\r\n                {this.props.prop.neededit\r\n                    ? \r\n                    <div className=\"innertodoitem\">\r\n                        <form onSubmit={this.handleSubmit}>\r\n                            <input\r\n                                name=\"task\"\r\n                                id=\"task\"\r\n                                value={this.state.task}\r\n                                onChange = {this.handleChange}\r\n                            />\r\n                            <button>\r\n                                <i className=\"far fa-edit\"></i>\r\n                            </button>\r\n                        </form>\r\n                    </div>\r\n                    :\r\n                    <div className=\"innertodoitem\">\r\n                        {\r\n                            this.props.prop.done ?\r\n                                <p className=\"done\" onClick={this.handleSwap}>{this.props.prop.task}</p> :\r\n                                <p onClick={this.handleSwap}>{this.props.prop.task}</p>\r\n                        }\r\n                        <i className=\"fas fa-pen\" onClick={this.edit}></i>\r\n                        <i className=\"fas fa-trash-alt\" onClick={this.delete}></i>\r\n                    </div>\r\n                }\r\n                \r\n                \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TodoItem;","import React, { Component } from \"react\";\r\nimport \"./Heading.css\";\r\n\r\nclass Heading extends Component{\r\n    render() {\r\n        return (\r\n            <div className=\"heading\">\r\n                <h1>Todo List<b> !</b></h1>\r\n                <p>A simple React Todo List App.</p>\r\n                <hr/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Heading;","import React, { Component } from \"react\";\r\nimport \"./AddTodoItem.css\";\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nclass AddTodoItem extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            task : \"\"\r\n        }\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n    handleChange(evt) {\r\n        this.setState({\r\n            task : evt.target.value\r\n        });\r\n    }\r\n    handleSubmit(evt) {\r\n        evt.preventDefault();\r\n        let todo = {\r\n            task: this.state.task,\r\n            done: false,\r\n            id: uuidv4(),\r\n            neededit: false \r\n        }\r\n        this.setState({ task: \"\" });\r\n        this.props.addTodo(todo);\r\n    }\r\n    render() {\r\n        return (\r\n            <form className=\"addItem\" onSubmit={this.handleSubmit}>\r\n                <input\r\n                    placeholder=\"Add New Todo!\"\r\n                    name=\"task\"\r\n                    className=\"inputfield\"\r\n                    id=\"task\"\r\n                    value={this.state.task}\r\n                    onChange={this.handleChange}\r\n                />\r\n                <button disabled={this.state.task.length===0}>\r\n                    <i className=\"far fa-edit\"></i>\r\n                </button>\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\nexport default AddTodoItem;\r\n","import React, { Component } from 'react';\r\nimport TodoItem from \"./TodoItem\";\r\nimport Heading from \"./Heading\";\r\nimport AddTodoItem from \"./AddTodoItem\";\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nclass TodoBox extends Component{\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            items: [\r\n                {task : 'Read Compiler design' , done : false ,neededit :false ,id:uuidv4() }\r\n            ]\r\n            \r\n        }\r\n        this.addTodo     = this.addTodo.bind(this);\r\n        this.deleteTodo  = this.deleteTodo.bind(this);\r\n        this.swapDone    = this.swapDone.bind(this);\r\n        this.neededit    = this.neededit.bind(this);\r\n        this.changeTask  = this.changeTask.bind(this);\r\n    }\r\n    addTodo(todo) {\r\n        this.setState({\r\n            items: [...this.state.items , todo]\r\n        })\r\n    }\r\n    swapDone(id) {\r\n        this.setState({\r\n            items: this.state.items.map(a => {\r\n                if (a.id === id)\r\n                    return {...a , done : !a.done};\r\n                return a;\r\n            })\r\n        })\r\n    }\r\n    deleteTodo(id) {\r\n        this.setState({\r\n            items: this.state.items.filter(a => a.id !== id)\r\n        });\r\n    }\r\n    neededit(id) {\r\n        this.setState({\r\n            items: this.state.items.map(a => {\r\n                if (a.id === id)\r\n                    return { ...a, neededit: true };\r\n                return { ...a, neededit: false };\r\n            })\r\n        })\r\n    }\r\n    changeTask(id , task) {\r\n        console.log(id)\r\n        this.setState({\r\n            items: this.state.items.map(a => {\r\n                if (a.id === id)\r\n                    return { ...a, task : task , neededit : false }\r\n                return a;\r\n            })\r\n        })\r\n    }\r\n    render() {\r\n        return (\r\n            <div style={{paddingBottom:\"40px\"}} className=\"todobox\" key={uuidv4()}>\r\n                <Heading />\r\n                {this.state.items.map(task =>\r\n                    <TodoItem\r\n                        key={task.id}\r\n                        prop={task}\r\n                        deleteTodo={this.deleteTodo}\r\n                        swapDone={this.swapDone}\r\n                        neededit={this.neededit}\r\n                        changeTask = {this.changeTask}\r\n                    />)\r\n                }\r\n                <AddTodoItem\r\n                    addTodo={this.addTodo}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TodoBox;","import React, { Component } from 'react';\nimport TodoBox from \"./TodoBox\";\nimport './App.css';\n\nclass App extends Component{\n    render() {\n        return (\n            <div className=\"app\">\n                <TodoBox />\n            </div>\n        )\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}